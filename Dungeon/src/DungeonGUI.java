
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Alex Holoday
 */
public class DungeonGUI extends javax.swing.JFrame {

    Position po = new Position(6,8);
    char[][] maze= new char[10][10];
    JTextField[][] tfMaze = new JTextField[10][10];
    private ArrayList<Being> party = new ArrayList();
    private ArrayList<Being> enemyParty = new ArrayList();
    private Being currentPlayer;
    Dice die = new Dice();
    Combat combat = new Combat();
    Queue<Being> init;
    Queue<Being> partyActions;
//    Map<String, Room> rooms = new HashMap();

    /**
     * Creates new form DungeonGUI
     */
    public DungeonGUI() {
        initComponents();
        System.out.println(System.getProperty("user.dir"));

        mapPanel.setLayout(new GridLayout(10,10));
        readMap();
        drawMap();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        displayPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        enemyTextArea = new javax.swing.JTextArea();
        mapPanel = new javax.swing.JPanel();
        playerPane = new javax.swing.JTabbedPane();
        partyPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        partyTextArea = new javax.swing.JTextArea();
        inventoryPane = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        inventoryTextArea = new javax.swing.JTextArea();
        doorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        explorePanel = new javax.swing.JPanel();
        fightButton = new javax.swing.JButton();
        potionButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        sleepButton = new javax.swing.JButton();
        combatPanel = new javax.swing.JPanel();
        meleeButton = new javax.swing.JButton();
        rangedButton = new javax.swing.JButton();
        magicButton = new javax.swing.JButton();
        memorizeButton = new javax.swing.JButton();
        fleeButton = new javax.swing.JButton();
        otherPanel = new javax.swing.JPanel();
        movePanel = new javax.swing.JPanel();
        southButton = new javax.swing.JButton();
        eastButton = new javax.swing.JButton();
        northButton = new javax.swing.JButton();
        westButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        infoTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        characterMenu = new javax.swing.JMenu();
        addCharacterMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dungeon");
        setResizable(false);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane2.setViewportView(logTextArea);

        displayPanel.setLayout(new java.awt.GridLayout(1, 3, 10, 0));

        enemyTextArea.setColumns(20);
        enemyTextArea.setRows(5);
        jScrollPane5.setViewportView(enemyTextArea);

        displayPanel.add(jScrollPane5);

        mapPanel.setBackground(new java.awt.Color(153, 153, 153));
        mapPanel.setPreferredSize(new java.awt.Dimension(270, 300));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        displayPanel.add(mapPanel);

        partyTextArea.setColumns(20);
        partyTextArea.setRows(5);
        jScrollPane1.setViewportView(partyTextArea);

        javax.swing.GroupLayout partyPaneLayout = new javax.swing.GroupLayout(partyPane);
        partyPane.setLayout(partyPaneLayout);
        partyPaneLayout.setHorizontalGroup(
            partyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );
        partyPaneLayout.setVerticalGroup(
            partyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        playerPane.addTab("Party", partyPane);

        inventoryTextArea.setColumns(20);
        inventoryTextArea.setRows(5);
        jScrollPane4.setViewportView(inventoryTextArea);

        javax.swing.GroupLayout inventoryPaneLayout = new javax.swing.GroupLayout(inventoryPane);
        inventoryPane.setLayout(inventoryPaneLayout);
        inventoryPaneLayout.setHorizontalGroup(
            inventoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );
        inventoryPaneLayout.setVerticalGroup(
            inventoryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        playerPane.addTab("Inventory", inventoryPane);

        displayPanel.add(playerPane);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/door.png"))); // NOI18N

        javax.swing.GroupLayout doorPanelLayout = new javax.swing.GroupLayout(doorPanel);
        doorPanel.setLayout(doorPanelLayout);
        doorPanelLayout.setHorizontalGroup(
            doorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(doorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        doorPanelLayout.setVerticalGroup(
            doorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
            .addGroup(doorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        actionPanel.setLayout(new java.awt.CardLayout());

        explorePanel.setLayout(new java.awt.GridLayout(4, 1));

        fightButton.setText("Fight");
        fightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fightButtonActionPerformed(evt);
            }
        });
        explorePanel.add(fightButton);

        potionButton.setText("Potion");
        potionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potionButtonActionPerformed(evt);
            }
        });
        explorePanel.add(potionButton);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        explorePanel.add(searchButton);

        sleepButton.setText("Sleep");
        sleepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sleepButtonActionPerformed(evt);
            }
        });
        explorePanel.add(sleepButton);

        actionPanel.add(explorePanel, "card2");

        combatPanel.setLayout(new java.awt.GridLayout(4, 0));

        meleeButton.setText("Melee");
        meleeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meleeButtonActionPerformed(evt);
            }
        });
        combatPanel.add(meleeButton);

        rangedButton.setText("Ranged");
        rangedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangedButtonActionPerformed(evt);
            }
        });
        combatPanel.add(rangedButton);

        magicButton.setText("Magic");
        magicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magicButtonActionPerformed(evt);
            }
        });
        combatPanel.add(magicButton);

        memorizeButton.setText("Memorize");
        memorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memorizeButtonActionPerformed(evt);
            }
        });
        combatPanel.add(memorizeButton);

        fleeButton.setText("Retreat");
        fleeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fleeButtonActionPerformed(evt);
            }
        });
        combatPanel.add(fleeButton);

        actionPanel.add(combatPanel, "card3");

        otherPanel.setLayout(new java.awt.CardLayout());

        movePanel.setLayout(new java.awt.GridBagLayout());

        southButton.setText("S");
        southButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 41, 11, 0);
        movePanel.add(southButton, gridBagConstraints);

        eastButton.setText("E");
        eastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eastButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 10);
        movePanel.add(eastButton, gridBagConstraints);

        northButton.setText("N");
        northButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 41, 0, 0);
        movePanel.add(northButton, gridBagConstraints);

        westButton.setText("W");
        westButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        movePanel.add(westButton, gridBagConstraints);

        otherPanel.add(movePanel, "card2");

        infoPanel.setPreferredSize(new java.awt.Dimension(111, 118));
        infoPanel.setLayout(new javax.swing.BoxLayout(infoPanel, javax.swing.BoxLayout.LINE_AXIS));

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        infoPanel.add(infoTextArea);

        otherPanel.add(infoPanel, "card3");

        gameMenu.setText("Game");

        newGameMenuItem.setText("New Game");
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newGameMenuItem);

        jMenuBar1.add(gameMenu);

        characterMenu.setText("Characters");

        addCharacterMenuItem.setText("Add Character to Party");
        addCharacterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCharacterMenuItemActionPerformed(evt);
            }
        });
        characterMenu.add(addCharacterMenuItem);

        jMenuBar1.add(characterMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(doorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(otherPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void northButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northButtonActionPerformed
        
        if(maze[po.getColumn()-1][po.getRow()] != '1')
        {
            tfMaze[po.getColumn()][po.getRow()].setText("" + ' ');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.LIGHT_GRAY);
            po.setPreviousColumn(po.getColumn());
            po.setPreviousRow(po.getRow());
            po.setColumn(po.getColumn()-1);
            tfMaze[po.getColumn()][po.getRow()].setText("" + 'X');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.WHITE);
            logTextArea.append("(" + po.getColumn() + ", " + po.getRow()+ ")\n");
        }
        else
        {
            logTextArea.append("You bump into a wall. \n");
        }

    }//GEN-LAST:event_northButtonActionPerformed

    private void southButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southButtonActionPerformed
        
        if(maze[po.getColumn()+1][po.getRow()] != '1')
        {
            tfMaze[po.getColumn()][po.getRow()].setText("" + ' ');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.LIGHT_GRAY);
            po.setPreviousColumn(po.getColumn());
            po.setPreviousRow(po.getRow());
            po.setColumn(po.getColumn()+1);
            tfMaze[po.getColumn()][po.getRow()].setText("" + 'X');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.WHITE);
            logTextArea.append("(" + po.getColumn() + ", " + po.getRow()+ ")\n");        }
        else
        {
            logTextArea.append("You bump into a wall. \n");
        }

    }//GEN-LAST:event_southButtonActionPerformed

    private void eastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastButtonActionPerformed

         if(maze[po.getColumn()][po.getRow()+1] != '1')
        {
            tfMaze[po.getColumn()][po.getRow()].setText("" + ' ');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.LIGHT_GRAY);
            po.setPreviousRow(po.getRow());
            po.setPreviousColumn(po.getColumn());
            po.setRow(po.getRow()+1);
            tfMaze[po.getColumn()][po.getRow()].setText("" + 'X');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.WHITE);
            logTextArea.append("(" + po.getColumn() + ", " + po.getRow()+ ")\n");
        }
        else
        {
            logTextArea.append("You bump into a wall. \n");
        }
         
    }//GEN-LAST:event_eastButtonActionPerformed

    private void westButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westButtonActionPerformed
        
         if(maze[po.getColumn()][po.getRow()-1] != '1')
        {
            tfMaze[po.getColumn()][po.getRow()].setText("" + ' ');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.LIGHT_GRAY);
            po.setPreviousRow(po.getRow());
            po.setPreviousColumn(po.getColumn());
            po.setRow(po.getRow()-1);
            tfMaze[po.getColumn()][po.getRow()].setText("" + 'X');
            tfMaze[po.getColumn()][po.getRow()].setBackground(Color.WHITE);
            logTextArea.append("(" + po.getColumn() + ", " + po.getRow()+ ")\n");
        }
        else
        {
            logTextArea.append("You bump into a wall. \n");
        }
        
    }//GEN-LAST:event_westButtonActionPerformed

    private void addCharacterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCharacterMenuItemActionPerformed
        
//        Check for full party
        if(party.size() >= 6)
        {
            JOptionPane.showMessageDialog(this, "Party is already full!", "Full Party", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        //Get Character Name
        String n = (String)JOptionPane.showInputDialog(
                    this,
                    "Name Your Character",
                    "Name",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    null);
        //Get Character Class
        Object[] possibilities = {"Warrior", "Wizard", "Thief"};
        String c = (String)JOptionPane.showInputDialog(
                    this,
                    "Choose Your Class",
                    "Class",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "Warrior");
        //Create Character
        Being pc = new Being(n);
        //Set Class
        switch(c){
            case "Warrior": pc.setWar();
                break;
            case "Wizard": pc.setWiz();
                break;
            case "Thief": pc.setThf();
        }
        //Add to Party
        party.add(pc);
        updateParty();
    }//GEN-LAST:event_addCharacterMenuItemActionPerformed


    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        party.clear();
        enemyParty.clear();
        partyTextArea.setText(null);
        enemyTextArea.setText(null);
        logTextArea.setText(null);
        infoTextArea.setText(null);
        mapPanel.removeAll();
        po.setRow(6);
        po.setColumn(8);
        drawMap();
        mapPanel.revalidate();
        
        
        
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    private void fightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fightButtonActionPerformed
        
        if(enemyParty.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "There is nothing here to fight.", "Nothing to Fight", JOptionPane.PLAIN_MESSAGE);
            return;
        }
            
        CardLayout cl = (CardLayout)(actionPanel.getLayout());
        cl.show(actionPanel, "card3");
        
        cl = (CardLayout)(otherPanel.getLayout());
        cl.show(otherPanel, "card3");
        
        
        
        beginRound();
        
    }//GEN-LAST:event_fightButtonActionPerformed

    private void beginRound()
    {
        
        partyActions.addAll(party);
        currentPlayer = partyActions.peek();
        init.addAll(enemyParty);
        init.addAll(party);
        
        
    }
    private void endOfRound()
    {
        while(!init.isEmpty())
        {
            Being b = init.poll();
            if(b.getName() != "Bandit")
            {
                String action = b.getAction();
                if(b.getTarget().getActive())
                {
                    if(action.equals("Melee"))
                    {
                        logTextArea.append(combat.meleeAttack(b, b.getTarget()));
                    }
                    else if(action.equals("Ranged"))
                    {
                        logTextArea.append(combat.rangeAttack(b, b.getTarget()));
                    }
                    else if(action.equals("Magic"))
                    {
                        logTextArea.append(combat.magicAttack(b, b.getTarget()));
                    }
                    else if(action.equals("Memorize"))
                    {
                        b.Spell++;
                        logTextArea.append(b.getName() + " charged their spellpower.");
                    }
                    else if(action.equals("Hide"))
                    {
                        combat.Hide(b);
                    }
                }
            }
            else
            {
                Random rand = new Random(); 
                int target = rand.nextInt(party.size()-1);
                logTextArea.append(combat.meleeAttack(b, party.get(target)));
            }
        }
//        if(party.isDead())
        {
            
        }
//        else if(enemyParty.isDead())
        {
            
        }
        
    }
    
    private void fleeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fleeButtonActionPerformed
        CardLayout cl = (CardLayout)(actionPanel.getLayout());
        cl.show(actionPanel, "card2");
        
        cl = (CardLayout)(otherPanel.getLayout());
        cl.show(otherPanel, "card2");
        
        tfMaze[po.getColumn()][po.getRow()].setText("" + '2');
        tfMaze[po.getColumn()][po.getRow()].setBackground(Color.BLACK);
        po.setRow(po.getPreviousRow());
        po.setColumn(po.getPreviousColumn());
        tfMaze[po.getColumn()][po.getRow()].setText("" + 'X');
        tfMaze[po.getColumn()][po.getRow()].setBackground(Color.WHITE);
        logTextArea.append("(" + po.getColumn() + ", " + po.getRow()+ ")\n");
        
    }//GEN-LAST:event_fleeButtonActionPerformed

    private void potionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potionButtonActionPerformed
        if(party.get(0).hasPotion())
        {
            for(Being b : party)
            {
                b.heal(5);
            }
            party.get(0).removePotion();
        }
        updateParty();
    }//GEN-LAST:event_potionButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sleepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sleepButtonActionPerformed
        if(die.d6() == 1)
        {
            
        }
        else
        {
            for(Being b : party)
            {
                b.heal(5);
            }
        }
    }//GEN-LAST:event_sleepButtonActionPerformed

    private void meleeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meleeButtonActionPerformed
        currentPlayer.setAction("Melee");
        partyActions.remove();
        if(partyActions.isEmpty())
        {
            endOfRound();
        }
        else
        {
            currentPlayer = partyActions.peek();
        }
        
    }//GEN-LAST:event_meleeButtonActionPerformed

    private void rangedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangedButtonActionPerformed
        currentPlayer.setAction("Ranged");
        partyActions.remove();
        if(partyActions.isEmpty())
        {
            endOfRound();
        }
        else
        {
            currentPlayer = partyActions.peek();
        }
    }//GEN-LAST:event_rangedButtonActionPerformed

    private void memorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memorizeButtonActionPerformed
        currentPlayer.setAction("Memorize");
        partyActions.remove();
        if(partyActions.isEmpty())
        {
            endOfRound();
        }
        else
        {
            currentPlayer = partyActions.peek();
        }
    }//GEN-LAST:event_memorizeButtonActionPerformed

    private void magicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magicButtonActionPerformed
        currentPlayer.setAction("Magic");
        partyActions.remove();
        if(partyActions.isEmpty())
        {
            endOfRound();
        }
        else
        {
            currentPlayer = partyActions.peek();
        }
    }//GEN-LAST:event_magicButtonActionPerformed

 private void readMap()
   {
	   //File file = new File("./maze.txt");
    try {
            BufferedReader sc = new BufferedReader(new FileReader("src/maze.txt"));
            String line = null;
            ArrayList<String[]> parts =new ArrayList();
            while ((line=sc.readLine()) != null) 
            {
                parts.add(line.split(","));
            }
            for ( int row = 0; row < 10; row++ )
            {
                int i = 0;
                for ( int column = 0; column < 10; column++ )
                {
                    maze[row][column] = parts.get(row)[i].charAt(0);
                    i++;
                }
           }
        } 
        catch (IOException e) 
        {
            throw new RuntimeException(e);
//	    	 for ( int row = 0; row < 10; row++ )
//	         {
//	            for ( int column = 0; column < 10; column++ )
//	            {
//	               maze[row][column] = 'd';
//	            }
//	         }
//             maze[1][1]='X';
//             maze[8][8] ='B';
        }
   }
 
 private void drawMap()
 {
     for ( int row = 0; row < 10; row++ )
    {
        for ( int column = 0; column < 10; column++)
        {
             JTextField temp= new JTextField(""+maze[row][column]);
             temp.setEditable(false);
//                 DARKNESS!
                 if(temp.getText().equals("" + '1') || temp.getText().equals("" + '2') || temp.getText().equals("" + 'E'))
                 {
                     temp.setBackground(Color.BLACK);
                     temp.setText(null);
                 }
             mapPanel.add(temp);
             tfMaze[row][column] = temp;
             if(maze[row][column] != '1')
             {
//                 Room tempRoom = new Room()
//                     string cor = Integer.toString(row)+ column.toString();
//                     room.put(cor, tempRoom);
             }

        }
    }
 }

private void updateParty()
{
    partyTextArea.removeAll();
    String partyText = "";
    for(Being b: party)
    {
        partyText += b.getName() + " the " + b.getProfession() + "\n"
                + "HP: " + b.getHp() + "\n"
                + "Stength: " + b.getStr() + "\n"
                + "Intelligence: " + b.getInt() + "\n"
                + "Dexterity: " + b.getDex() + "\n"
                + "Weapon: " + b.getWeaponName() + "\n"
                + "Armor: " + b.getArmorName()
                + "Spell Power: " + b.Spell + "\n\n";
    }
    
    partyTextArea.setText(partyText);
    String inventoryText;
    if(party.get(0).hasPotion())
    {
        inventoryText = "Potion: Yes";
    }
    else 
        inventoryText = "Potion: No";
    
    inventoryTextArea.setText(inventoryText);

}

private void updateEnemy()
{
    enemyTextArea.removeAll();
    String enemyText = "";
    for(Being b: enemyParty)
    {
        enemyText += b.getName() + "\n"
                + "HP: " + b.getHp() + "\n"
                + "Stength: " + b.getStr() + "\n"
                + "Intelligence: " + b.getInt() + "\n"
                + "Dexterity: " + b.getDex() + "\n\n";
    }
    
    enemyTextArea.setText(enemyText);
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DungeonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DungeonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DungeonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DungeonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DungeonGUI().setVisible(true);
            }
        });
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JMenuItem addCharacterMenuItem;
    private javax.swing.JMenu characterMenu;
    private javax.swing.JPanel combatPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JPanel doorPanel;
    private javax.swing.JButton eastButton;
    private javax.swing.JTextArea enemyTextArea;
    private javax.swing.JPanel explorePanel;
    private javax.swing.JButton fightButton;
    private javax.swing.JButton fleeButton;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JPanel inventoryPane;
    private javax.swing.JTextArea inventoryTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton magicButton;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JButton meleeButton;
    private javax.swing.JButton memorizeButton;
    private javax.swing.JPanel movePanel;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JButton northButton;
    private javax.swing.JPanel otherPanel;
    private javax.swing.JPanel partyPane;
    private javax.swing.JTextArea partyTextArea;
    private javax.swing.JTabbedPane playerPane;
    private javax.swing.JButton potionButton;
    private javax.swing.JButton rangedButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sleepButton;
    private javax.swing.JButton southButton;
    private javax.swing.JButton westButton;
    // End of variables declaration//GEN-END:variables
    }
