import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.*;
import java.util.*;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class mazeLayout extends JFrame implements ActionListener 
{
   Position po = new Position(2,1);
   char[][] maze= new char[10][10];
	
   JCheckBox b1 = new JCheckBox("shiny", true);

   JTextField txt1 = new JTextField("SLACKER VIDEOGAME!");
   
   JTextField txt2 = new JTextField("box");
	
   JButton btn1 = new JButton("Btn 1");
   JButton btn2 = new JButton("map");
   JButton btn3 = new JButton("NPC SPOT");
   JButton btn4 = new JButton("PLAYER SPOT");
   
   JButton btnU = new JButton("UP");
   JButton btnD = new JButton("DOWN");
   JButton btnL = new JButton("LEFT");
   JButton btnR = new JButton("RIGHT");
   
   JPanel panelM = new JPanel();
	JPanel panelC = new JPanel();
   JPanel panelI = new JPanel();
   
   public static void main(String [] args)
   {
      mazeLayout gq = new mazeLayout();

   }

   public mazeLayout()
   {
      super("GUI");

		add(txt1, BorderLayout.NORTH);
		
		panelC.setLayout(new GridLayout(1, 2));
      //panelC.add(btn1);
      panelM.setLayout(new GridLayout(10,10));
      readMap();
      displayMap();
      panelC.add(panelM);
      
      
      //panelM.add(txt2);
            
      
      panelC.add(panelI);
      panelI.setLayout(new GridLayout(4,1));
            
      panelI.add(btnU);
      panelI.add(btnD);
      panelI.add(btnL);
      panelI.add(btnR);
      
      btnU.addActionListener(this);
      btnD.addActionListener(this);
      
      //btnL.clickHandlerLeft(this);
      //btnR.clickHandlerRight(this);
      
      JPanel panelW = new JPanel();
      panelW.add(btn3);
      
      JPanel panelE = new JPanel();
      panelE.add(btn4);

	   add(panelC, BorderLayout.CENTER);
      
      add(panelW, BorderLayout.WEST);
      add(panelE, BorderLayout.EAST);
      
      pack();
      setVisible(true);
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   }
   
   public void displayMap()
   {
      for ( int row = 0; row < 10; row++ )
      {
         for ( int column = 0; column < 10; column++ )
         {
        	 JTextField temp= new JTextField(""+maze[row][column]);
        	 temp.setEditable(false);
        	 //for rewriting use setText("input here");
        	 panelM.add(temp);
         }
      }
      System.out.println("printed from displaymap");
   }
   
   public void readMap()
   {
	   //File file = new File("./maze.txt");

	    try {
	        BufferedReader sc = new BufferedReader(new FileReader("maze.txt"));
	        String line = null;
	        ArrayList<String[]> parts = new ArrayList();
	        while ((line=sc.readLine()) != null) 
	        {
	            parts.add(line.split(","));
           }
	        for ( int row = 0; row < 10; row++ )
	        {
	            int i = 0;
               for ( int column = 0; column < 10; column++ )
	            {
	              maze[row][column] = parts.get(row)[i].charAt(0);
	              i++;
	            }
	       }
          maze[po.getRow()][po.getColumn()] = 'x';
          maze[7][7] = 'd';
	    } 
	    catch (IOException e) 
	    {
	    	 for ( int row = 0; row < 10; row++ )
	         {
	            for ( int column = 0; column < 10; column++ )
	            {
                     maze[row][column] = 'd';
	            }
	         }
	    	 maze[1][1]='X';
	    	 maze[8][8] ='B';
	    }

   }
   
   public void actionPerformed(ActionEvent event)
   {
	   String action = event.getActionCommand();
	   
	   switch(action)
	   {
	   case "UP":clickHandlerUp(event);
	   break;
	   case "DOWN":clickHandlerDown(event);
      break;
	   }
   }
   public void clickHandlerUp(ActionEvent e) 
   {
      int temp=po.getRow();
	   if(maze[po.getColumn()][po.getRow()-1] != '1')
	   //W is a wall
	   {
		maze[po.getColumn()][po.getRow()]='9';
	   	//9 is been before
	   	temp--;
	   	po.setRow(temp);
	   	maze[po.getColumn()][po.getRow()]='X';
	   	//x is the player moving
	   }
	   else
	   {
		   System.out.println("RAN INTO WALL!");
	   }   
      displayMap();
   }
   
   
   public void clickHandlerDown(ActionEvent e) 
   {
	   int temp=po.getRow();
	   if(maze[po.getColumn()][po.getRow()-1] != '1')
	   //W is a wall
	   {
		maze[po.getColumn()][po.getRow()]='9';
	   	//9 is been before
	   	temp++;
	   	po.setRow(temp);
	   	maze[po.getColumn()][po.getRow()]='X';
	   	//x is the player moving
	   }
	   else
	   {
		   System.out.println("RAN INTO WALL!");
	   }   
      displayMap();
   }
   /*
   public void clickHandlerLeft(ActionEvent e) 
   {
	   maze[row][column] = maze[row-1][column]
   }
   public void clickHandlerRight(ActionEvent e) 
   {
	   maze[row][column] = maze[row+1][column]
   }
*/

}
